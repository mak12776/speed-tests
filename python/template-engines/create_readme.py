#!/usr/bin/python3

import sys
from subprocess import run, PIPE

class dotdict(dict):
    __getattr__ = dict.__getitem__
    __setattr__ = dict.__setitem__
    __delattr__ = dict.__delitem__

engines = [

        dotdict(
            name = 'mako',
            path = 'mako/mako',
            url = 'https://github.com/sqlalchemy/mako',
            ),

        dotdict(
            name = 'jinja',
            path = 'jinja/jinja2',
            url = 'https://github.com/pallets/jinja',
            ),

        dotdict(
            name = 'pycro',
            path = 'pycro/pycro',
            url = 'https://github.com/mak12776/pycro',
            ),

        dotdict(
            name = 'preprocess',
            path = 'preprocess/lib',
            url = 'https://github.com/trentm/preprocess',
            ),

    ]

fnums_command = " find {} -type f | wc -l "
lines_command = " wc $(find {} -type f) -l | " \
                " tail -1 | " \
	        " sed -E \"s/^\s*([0-9]*).*/\\1/g\" "



def count_lines_fnums(path):
    return (
            get_output(fnums_command.format(path)), 
            get_output(lines_command.format(path))
        )

def get_output(command):
    return run(command, stdout=PIPE, check=True, shell=True).stdout\
            .decode('utf-8')

def main():
    if len(sys.argv) != 2:
        print("usage: {} [FILENAME]".format(sys.argv[0]))
        sys.exit(0)

    for engine in engines:
        engine.fnum = get_output(fnums_command.format(engine.path)).strip()
        engine.lines = get_output(lines_command.format(engine.path)).strip()

    with open(sys.argv[1], 'w') as text_file:
        text_file.write(format_text())

text = """\

> all of these statistics automatically generated by `{name}` script file.

# Comparsion of template engines:

| engines   | files No. | lines No.
| ---	    | ---       | ---
{comparision}

{urls}
"""

def format_text():
    return text.format(
        name = sys.argv[0],

        comparision = '\n'.join(
            '| [{0.name}][] | {0.fnum} | {0.lines}'.format(engine) \
                    for engine in engines),

        urls = '\n'.join(
            '[{0.name}]: {0.url}'.format(engine) for engine in engines),
        )

if __name__ == '__main__':
    main()

